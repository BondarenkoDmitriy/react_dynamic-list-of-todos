{"version":3,"sources":["components/TodoItems/TodoItems.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Filters.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoItems","todo","onSelectedTodo","selectedTodo","id","title","completed","isSelected","className","cn","type","onClick","TodoList","visibleTodos","map","TodoFilter","query","filter","onQueryChange","onFilterChange","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterBy","TodoModal","onClose","useState","user","setUser","isLoading","setIsLoading","loadUser","a","userId","newUser","console","error","useEffect","href","email","name","App","todos","setTodos","setQuery","All","setFilter","hasError","setHasError","setSelectedTodo","loadTodos","response","handleQueryChange","useCallback","newQuery","handleFilterChange","selectedFilter","handleModalClose","handleTodoSelect","useMemo","COMPLETED","ACTIVE","toLowerCase","queryLower","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12bd8aa7.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  onSelectedTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoItems: React.FC<Props> = ({\n  todo,\n  onSelectedTodo,\n  selectedTodo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const isSelected = selectedTodo && selectedTodo.id === id;\n\n  return (\n    <tr\n      key={id}\n      data-cy=\"todo\"\n      className={cn({\n        'has-backqound-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      {completed\n        ? (\n          <>\n            <td className=\"is-vcentered\">\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className=\"has-text-success\">{title}</p>\n            </td>\n          </>\n        )\n        : (\n          <>\n            <td className=\"is-vcentered\" />\n            <td className=\"is-vcentered is-expanded\">\n              <p className=\"has-text-danger\">{title}</p>\n            </td>\n          </>\n        )}\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectedTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isSelected,\n              'fa-eye-slash': isSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItems } from '../TodoItems/TodoItems';\n\ninterface Props {\n  visibleTodos: Todo[];\n  onSelectedTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  visibleTodos,\n  onSelectedTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {visibleTodos.map((todo) => (\n        <TodoItems\n          key={todo.id}\n          todo={todo}\n          onSelectedTodo={onSelectedTodo}\n          selectedTodo={selectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\n\ninterface Props {\n  query: string;\n  filter: string;\n  onQueryChange: (value: string) => void;\n  onFilterChange: (value: string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  filter,\n  onQueryChange,\n  onFilterChange,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filter}\n          onChange={(event) => onFilterChange(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onQueryChange(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onQueryChange('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterBy {\n  All = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedTodo: Todo | null;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onClose,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadUser = async () => {\n    setIsLoading(true);\n    try {\n      if (selectedTodo) {\n        const newUser = await getUser(selectedTodo.userId);\n\n        setUser(newUser);\n        setIsLoading(false);\n      }\n    } catch (error) {\n      console.error(error); // eslint-disable-line no-console\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              {selectedTodo?.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                )\n                : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterBy } from './types/Filters';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState(FilterBy.All);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n    try {\n      const response = await getTodos();\n\n      setTodos(response);\n      setIsLoading(false);\n    } catch (error) {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleQueryChange = useCallback((newQuery: string) => {\n    setQuery(newQuery);\n  }, []);\n\n  const handleFilterChange = useCallback((selectedFilter) => {\n    setFilter(selectedFilter);\n  }, []);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const handleTodoSelect = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter((todo) => {\n      switch (filter) {\n        case FilterBy.All:\n          return true;\n        case FilterBy.COMPLETED:\n          return todo.completed;\n        case FilterBy.ACTIVE:\n          return !todo.completed;\n        default:\n          return false;\n      }\n    }).filter((todo) => {\n      const title = todo.title.toLowerCase();\n      const queryLower = query.toLowerCase();\n\n      return title.includes(queryLower);\n    });\n  }, [todos, query, filter]);\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      {\n        hasError\n          ? (<p> Something wrong</p>)\n          : (\n            <>\n              <div className=\"section\">\n                <div className=\"container\">\n                  <div className=\"box\">\n                    <h1 className=\"title\">Todos:</h1>\n\n                    <div className=\"block\">\n                      <TodoFilter\n                        query={query}\n                        filter={filter}\n                        onQueryChange={handleQueryChange}\n                        onFilterChange={handleFilterChange}\n                      />\n                    </div>\n\n                    <div className=\"block\">\n                      {isLoading\n                        ? <Loader />\n                        : (\n                          <TodoList\n                            visibleTodos={visibleTodos}\n                            onSelectedTodo={handleTodoSelect}\n                            selectedTodo={selectedTodo}\n                          />\n                        )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {selectedTodo && (\n                <TodoModal\n                  selectedTodo={selectedTodo}\n                  onClose={handleModalClose}\n                />\n              )}\n            </>\n          )\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}